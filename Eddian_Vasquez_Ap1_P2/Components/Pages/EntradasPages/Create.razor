@page "/Entradas/CreateEntrada"
@using Blazored.Toast.Services
@using Eddian_Vasquez_Ap1_p2.Models
@using Eddian_Vasquez_Ap1_p2.Services
@rendermode InteractiveServer
@inject EntradasService entradasService
@inject ProductosService productosService
@inject NavigationManager navigationManager
@inject IToastService toastService

<PageTitle>Nueva Entrada de Producto</PageTitle>

<EditForm Model="Entrada" OnValidSubmit="GuardarEntrada">
    <DataAnnotationsValidator />

    <div class="container py-4">
        <div class="card shadow-lg border-primary">
            <div class="card-header bg-primary text-white text-center py-3">
                <h4 class="card-title mb-0 fw-bold">Nueva Entrada de Producto</h4>
            </div>

            <div class="card-body p-4">

                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputDate class="form-control" @bind-Value="Entrada.Fecha" id="fechaInput"></InputDate>
                            <label for="fechaInput">Fecha</label>
                            <ValidationMessage For="(() => Entrada.Fecha)" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText class="form-control" @bind-Value="Entrada.Concepto" placeholder="Ej: Compra a proveedor X, Producción lote Y" id="conceptoInput"></InputText>
                            <label for="conceptoInput">Concepto</label>
                            <ValidationMessage For="(() => Entrada.Concepto)" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="form-floating mb-3">
                    <InputNumber @bind-Value="Entrada.EntradaId" class="form-control" readonly id="entradaIdInput"></InputNumber>
                    <label for="entradaIdInput">Entrada Id</label>
                </div>


                <hr class="my-4">

                <div class="border border-success rounded p-4 mb-4">
                    <h5 class="text-success mb-3">Detalle de Productos</h5>

                    <div class="row g-3 align-items-end mb-3">
                        <div class="col-md-5">
                            <div class="form-floating">
                                <InputSelect class="form-select" @bind-Value="NuevaEntradaDetalle.ProductoId" @onchange="OnProductoSelectionChanged" id="productoSelect">
                                    <option value="0">--- Seleccione un Producto ---</option>
                                    @foreach (var producto in ProductosDisponibles)
                                    {
                                        <option value="@producto.ProductoId">@producto.Descripcion</option>
                                    }
                                </InputSelect>
                                <label for="productoSelect">Producto</label>
                                <ValidationMessage For="(() => NuevaEntradaDetalle.ProductoId)" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-floating">
                                <InputNumber class="form-control" @bind-Value="NuevaEntradaDetalle.Cantidad" placeholder="Cantidad" id="cantidadInput"></InputNumber>
                                <label for="cantidadInput">Cantidad</label>
                                <ValidationMessage For="(() => NuevaEntradaDetalle.Cantidad)" class="text-danger" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <button type="button" class="btn btn-success w-100 py-2 d-flex align-items-center justify-content-center" @onclick="AgregarDetalle">
                                <i class="bi bi-plus-lg me-2"></i> Agregar
                            </button>
                        </div>
                    </div>

                    @if (Entrada.Detalle.Any())
                    {
                        <div class="table-responsive mt-3">
                            <table class="table table-striped table-hover align-middle">
                                <thead class="table-dark">
                                    <tr class="text-center">
                                        <th>Producto</th>
                                        <th>Cantidad</th>
                                        <th>Subtotal Peso (Kg)</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var detalle in Entrada.Detalle)
                                    {
                                        <tr class="text-center">
                                            <td>@(detalle.Producto?.Descripcion ?? "Desconocido")</td>
                                            <td>@detalle.Cantidad</td>
                                            
                                            <td>@(((double)detalle.Cantidad * detalle.PesoEntrada / 1000.0).ToString("N2"))</td>
                                            <td>
                                                <button type="button" @onclick="() => RemoverDetalle(detalle)" class="btn btn-outline-danger btn-sm">
                                                    <i class="bi bi-trash"></i> Eliminar
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="d-flex justify-content-end mt-3">
                            <strong class="text-success fs-5">Total: @Entrada.PesoTotal.ToString("N2") Kg</strong>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info text-center mt-3" role="alert">
                            No hay detalles agregados. Agregue uno para empezar.
                        </div>
                    }
                </div>
            </div>

            <div class="card-footer d-flex justify-content-center gap-2 p-3 bg-light">
                <a href="/Entradas/IndexEntradas" class="btn btn-secondary px-4 py-2">
                    <i class="bi bi-arrow-left me-2"></i> Volver
                </a>
                <button type="submit" class="btn btn-success px-4 py-2">
                    <i class="bi bi-floppy me-2"></i> Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Entrada Entrada { get; set; } = new Entrada();
    public EntradaDetalle NuevaEntradaDetalle { get; set; } = new EntradaDetalle();
    public List<Producto> ProductosDisponibles { get; set; } = new List<Producto>();

    protected override async Task OnInitializedAsync()
    {
        
        ProductosDisponibles = await productosService.Listar(p => true);
        Entrada.Fecha = DateTime.Now;

        
        ResetearDetalle();
    }

    private void AgregarDetalle()
    {
        if (NuevaEntradaDetalle.ProductoId == 0)
        {
            toastService.ShowWarning("Debe seleccionar un producto.");
            return;
        }

        if (NuevaEntradaDetalle.Cantidad <= 0)
        {
            toastService.ShowWarning("La cantidad debe ser mayor que cero.");
            return;
        }

        var productoSeleccionado = ProductosDisponibles.FirstOrDefault(p => p.ProductoId == NuevaEntradaDetalle.ProductoId);

        if (productoSeleccionado != null)
        {
            var detalleExistente = Entrada.Detalle.FirstOrDefault(d => d.ProductoId == NuevaEntradaDetalle.ProductoId);

            if (detalleExistente == null)
            {
                
                Entrada.Detalle.Add(new EntradaDetalle
                    {
                    
                        EntradaDetalleId = 0,
                        ProductoId = NuevaEntradaDetalle.ProductoId,
                        Cantidad = NuevaEntradaDetalle.Cantidad,
                        PesoEntrada = productoSeleccionado.Peso, 
                        Producto = productoSeleccionado 
                    });
                toastService.ShowSuccess("Detalle de producto agregado correctamente.");
            }
            else
            {
                detalleExistente.Cantidad += NuevaEntradaDetalle.Cantidad;
                toastService.ShowInfo($"Cantidad actualizada para {productoSeleccionado.Descripcion}.");
            }

            CalcularPesoTotal();
            ResetearDetalle(); 
        }
        else
        {
            toastService.ShowError("Producto no encontrado.");
        }
    }

    private void ResetearDetalle()
    {
        NuevaEntradaDetalle = new EntradaDetalle();
        
        NuevaEntradaDetalle.ProductoId = ProductosDisponibles.FirstOrDefault()?.ProductoId ?? 0;
        NuevaEntradaDetalle.Cantidad = 1; 
        ActualizarPesoUnitarioParaDetalle(); 
    }

    private void ActualizarPesoUnitarioParaDetalle()
    {
        var productoSeleccionado = ProductosDisponibles.FirstOrDefault(p => p.ProductoId == NuevaEntradaDetalle.ProductoId);
        NuevaEntradaDetalle.PesoEntrada = productoSeleccionado?.Peso ?? 0;
    }

    private void OnProductoSelectionChanged()
    {
        ActualizarPesoUnitarioParaDetalle();
    }

    private async Task GuardarEntrada()
    {
        if (!Entrada.Detalle.Any())
        {
            toastService.ShowWarning("Debe agregar al menos un producto a la entrada.");
            return;
        }

        
        CalcularPesoTotal();

        var conceptoExistente = await entradasService.Listar(e => e.Concepto.ToLower() == Entrada.Concepto.ToLower());
        if (conceptoExistente.Any())
        {
            toastService.ShowError("Ya existe una entrada con este concepto. Por favor, utilice otro.");
            return;
        }

        var guardado = await entradasService.Guardar(Entrada);

        if (guardado)
        {
            toastService.ShowSuccess("Entrada guardada correctamente.");
            await Task.Delay(500);
            navigationManager.NavigateTo("/Entradas/IndexEntradas");
        }
        else
        {
            toastService.ShowError("Error al guardar la entrada. Intente de nuevo.");
        }
    }

    private void RemoverDetalle(EntradaDetalle detalle)
    {
        Entrada.Detalle.Remove(detalle);

        
        NuevaEntradaDetalle.ProductoId = detalle.ProductoId;
        NuevaEntradaDetalle.Cantidad = detalle.Cantidad;
        ActualizarPesoUnitarioParaDetalle(); 
        

        CalcularPesoTotal();
        toastService.ShowInfo($"Detalle de {detalle.Producto?.Descripcion ?? "producto"} removido y listo para ser re-agregado.");
    }

    private void CalcularPesoTotal()
    {
        
        Entrada.PesoTotal = Entrada.Detalle.Sum(d => (double)d.Cantidad * d.PesoEntrada) / 1000.0; 
    }
}